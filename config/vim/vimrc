" vimrc
set encoding=utf-8
scriptencoding utf-8

" encording: utf-8優先
set fileencodings=utf-8,cp932,euc-jp,fefault,latin
set fileformats=unix,dos,mac

if &loadplugins
  " minpac: http://qiita.com/k-takata/items/36c240a23f88d699ce86
  packadd minpac

  call minpac#init()

  call minpac#add('k-takata/minpac', {'type': 'opt'})

  call minpac#add('itchyny/lightline.vim')
  call minpac#add('oahiroaki/vim-monochrome')
  call minpac#add('ctrlpvim/ctrlp.vim')

  call minpac#add('elixir-lang/vim-elixir')
  call minpac#add('digitaltoad/vim-pug')
endif

filetype plugin indent on
syntax enable

set backspace=indent,eol,start

set nonumber
set nowrap
set list listchars=tab:>-,trail:-,nbsp:%,extends:>

set showmatch
set whichwrap=h,l
set scrolloff=3

if executable('jvgrep')
  set grepprg=jvgrep
endif

" Search
set ignorecase
set smartcase
set hlsearch

" Buffer
set hidden
set history=5000

" ステータスライン
set laststatus=2
set ruler

" バックアップ
set nobackup

" スワップ
silent! call mkdir($HOME . '/.vim/swap', 'p')
set directory=$HOME/.vim/swap
set swapfile

" UNDO
if has('persistent-undo')
  silent! call mkdir($HOME . '/.vim/undo', 'p')
  set undodir=$HOME/vimfiles/undo
  set undofile
endif

set background=dark

" default
set expandtab shiftwidth=2 tabstop=2 softtabstop=2

colorscheme monochrome

" インデント
set cindent
set cinoptions+=:0,j1

set wildmenu

" ref: http://cohama.hateblo.jp/entry/2013/08/11/020849
function! s:get_syn_id(transparent)
  let synid = synID(line("."), col("."), 1)
  if a:transparent
    return synIDtrans(synid)
  else
    return synid
  endif
endfunction
function! s:get_syn_attr(synid)
  let name = synIDattr(a:synid, "name")
  let ctermfg = synIDattr(a:synid, "fg", "cterm")
  let ctermbg = synIDattr(a:synid, "bg", "cterm")
  let guifg = synIDattr(a:synid, "fg", "gui")
  let guibg = synIDattr(a:synid, "bg", "gui")
  return {
    \ "name": name,
    \ "ctermfg": ctermfg,
    \ "ctermbg": ctermbg,
    \ "guifg": guifg,
    \ "guibg": guibg }
endfunction
function! s:get_syn_info()
  let baseSyn = s:get_syn_attr(s:get_syn_id(0))
  echo "name: " . baseSyn.name .
    \ " ctermfg: " . baseSyn.ctermfg .
    \ " ctermbg: " . baseSyn.ctermbg .
    \ " guifg: " . baseSyn.guifg .
    \ " guibg: " . baseSyn.guibg
  let linkedSyn = s:get_syn_attr(s:get_syn_id(1))
  echo "link to"
  echo "name: " . linkedSyn.name .
    \ " ctermfg: " . linkedSyn.ctermfg .
    \ " ctermbg: " . linkedSyn.ctermbg .
    \ " guifg: " . linkedSyn.guifg .
    \ " guibg: " . linkedSyn.guibg
endfunction
command! SyntaxInfo call s:get_syn_info()

" ctrlp.vim
" Prefix: s
nnoremap s <Nop>
nnoremap sa :<C-u>CtrlP<Space>
nnoremap sb :<C-u>CtrlPBuffer<CR>
nnoremap sd :<C-u>CtrlPDir<CR>
nnoremap sf :<C-u>CtrlP<CR>
nnoremap sl :<C-u>CtrlPLine<CR>
nnoremap sm :<C-u>CtrlPMRUFiles<CR>
nnoremap sq :<C-u>CtrlPQuickfix<CR>
nnoremap ss :<C-u>CtrlPMixed<CR>
nnoremap st :<C-u>CtrlPTag<CR>

let g:ctrlp_map = '<Nop>'
" Guess vcs root dir
let g:ctrlp_working_path_mode = 'ra'
" Open new file in current window
let g:ctrlp_open_new_file = 'r'
let g:ctrlp_extensions = ['tag', 'quickfix', 'dir', 'line', 'mixed']
let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:18'

" incsearch.vim
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
map *   <Plug>(incsearch-nohl)<Plug>(asterisk-*)
map g*  <Plug>(incsearch-nohl)<Plug>(asterisk-g*)
map #   <Plug>(incsearch-nohl)<Plug>(asterisk-#)
map g#  <Plug>(incsearch-nohl)<Plug>(asterisk-g#)
map z*  <Plug>(incsearch-nohl0)<Plug>(asterisk-z*)
map gz* <Plug>(incsearch-nohl0)<Plug>(asterisk-gz*)
map z#  <Plug>(incsearch-nohl0)<Plug>(asterisk-z#)
map gz# <Plug>(incsearch-nohl0)<Plug>(asterisk-gz#)

" FileType
augroup MyFileType
  autocmd!
  autocmd FileType java,php
    \ set et sw=4 ts=4 sts=4
  autocmd FileType go,c,c++
    \ set noet sw=4 ts=4 sts=4
  autocmd FileType javascript,json,typescript,css,sass,scss,html,xml
    \ set et sw=2 ts=2 sts=2
  autocmd FileType vim,python,ruby
    \ set et sw=2 ts=2 sts=2
  autocmd FileType sql
    \ set et sw=2 ts=2 sts=2
augroup END
